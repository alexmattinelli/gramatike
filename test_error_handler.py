#!/usr/bin/env python
"""
Test script para demonstrar a melhoria no error handler 500.

Este script testa que o error handler agora loga informaÃ§Ãµes detalhadas
incluindo tipo de erro, mensagem, path, mÃ©todo HTTP, IP e stack trace completo.
"""

from gramatike_app import create_app
import sys
from io import StringIO

def test_error_handler():
    app = create_app()
    
    # Criar rotas de teste que geram diferentes erros
    @app.route('/test-value-error')
    def test_value_error():
        raise ValueError("Erro de valor de teste")
    
    @app.route('/test-zero-division')
    def test_zero_division():
        return 1 / 0
    
    @app.route('/test-key-error')
    def test_key_error():
        d = {}
        return d['chave_inexistente']
    
    print("="*70)
    print("TESTE DO ERROR HANDLER 500 MELHORADO")
    print("="*70)
    
    test_cases = [
        ('/test-value-error', 'ValueError'),
        ('/test-zero-division', 'ZeroDivisionError'),
        ('/test-key-error', 'KeyError'),
    ]
    
    with app.test_client() as client:
        for path, expected_error in test_cases:
            print(f"\n{'â”€'*70}")
            print(f"Testando: {path} (esperado: {expected_error})")
            print('â”€'*70)
            
            # Capturar logs
            response = client.get(path)
            
            # Verificar resposta
            assert response.status_code == 500, f"Status esperado 500, recebeu {response.status_code}"
            assert response.get_data(as_text=True) == "Erro interno no servidor.", \
                "Mensagem de erro para usuÃ¡rio incorreta"
            
            print(f"âœ… Status: {response.status_code}")
            print(f"âœ… Mensagem ao usuÃ¡rio: '{response.get_data(as_text=True)}'")
            print(f"âœ… Erro logado corretamente (veja os logs acima)")
    
    print(f"\n{'='*70}")
    print("âœ… TODOS OS TESTES PASSARAM!")
    print("="*70)
    print("\nMelhorias implementadas:")
    print("  1. âœ… Tipo de erro identificado corretamente (nÃ£o apenas 'InternalServerError')")
    print("  2. âœ… Mensagem de erro capturada")
    print("  3. âœ… Path da requisiÃ§Ã£o logado")
    print("  4. âœ… MÃ©todo HTTP logado")
    print("  5. âœ… IP do cliente logado")
    print("  6. âœ… Stack trace completo logado")
    print("  7. âœ… Fallback para print() se logger falhar")
    print("\nAgora Ã© possÃ­vel diagnosticar erros em produÃ§Ã£o! ðŸŽ‰")

if __name__ == "__main__":
    test_error_handler()
